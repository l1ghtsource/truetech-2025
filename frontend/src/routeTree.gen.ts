/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthImport } from './routes/_auth'
import { Route as AuthIndexImport } from './routes/_auth/index'
import { Route as AuthVideoImport } from './routes/_auth/video'
import { Route as AuthShopImport } from './routes/_auth/shop'
import { Route as AuthServicesImport } from './routes/_auth/services'
import { Route as AuthProfileImport } from './routes/_auth/profile'
import { Route as AuthMapImport } from './routes/_auth/map'
import { Route as AuthChatImport } from './routes/_auth/chat'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthRoute = AuthImport.update({
  id: '/_auth',
  getParentRoute: () => rootRoute,
} as any)

const AuthIndexRoute = AuthIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthRoute,
} as any)

const AuthVideoRoute = AuthVideoImport.update({
  id: '/video',
  path: '/video',
  getParentRoute: () => AuthRoute,
} as any)

const AuthShopRoute = AuthShopImport.update({
  id: '/shop',
  path: '/shop',
  getParentRoute: () => AuthRoute,
} as any)

const AuthServicesRoute = AuthServicesImport.update({
  id: '/services',
  path: '/services',
  getParentRoute: () => AuthRoute,
} as any)

const AuthProfileRoute = AuthProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthRoute,
} as any)

const AuthMapRoute = AuthMapImport.update({
  id: '/map',
  path: '/map',
  getParentRoute: () => AuthRoute,
} as any)

const AuthChatRoute = AuthChatImport.update({
  id: '/chat',
  path: '/chat',
  getParentRoute: () => AuthRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_auth/chat': {
      id: '/_auth/chat'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof AuthChatImport
      parentRoute: typeof AuthImport
    }
    '/_auth/map': {
      id: '/_auth/map'
      path: '/map'
      fullPath: '/map'
      preLoaderRoute: typeof AuthMapImport
      parentRoute: typeof AuthImport
    }
    '/_auth/profile': {
      id: '/_auth/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthProfileImport
      parentRoute: typeof AuthImport
    }
    '/_auth/services': {
      id: '/_auth/services'
      path: '/services'
      fullPath: '/services'
      preLoaderRoute: typeof AuthServicesImport
      parentRoute: typeof AuthImport
    }
    '/_auth/shop': {
      id: '/_auth/shop'
      path: '/shop'
      fullPath: '/shop'
      preLoaderRoute: typeof AuthShopImport
      parentRoute: typeof AuthImport
    }
    '/_auth/video': {
      id: '/_auth/video'
      path: '/video'
      fullPath: '/video'
      preLoaderRoute: typeof AuthVideoImport
      parentRoute: typeof AuthImport
    }
    '/_auth/': {
      id: '/_auth/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthIndexImport
      parentRoute: typeof AuthImport
    }
  }
}

// Create and export the route tree

interface AuthRouteChildren {
  AuthChatRoute: typeof AuthChatRoute
  AuthMapRoute: typeof AuthMapRoute
  AuthProfileRoute: typeof AuthProfileRoute
  AuthServicesRoute: typeof AuthServicesRoute
  AuthShopRoute: typeof AuthShopRoute
  AuthVideoRoute: typeof AuthVideoRoute
  AuthIndexRoute: typeof AuthIndexRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthChatRoute: AuthChatRoute,
  AuthMapRoute: AuthMapRoute,
  AuthProfileRoute: AuthProfileRoute,
  AuthServicesRoute: AuthServicesRoute,
  AuthShopRoute: AuthShopRoute,
  AuthVideoRoute: AuthVideoRoute,
  AuthIndexRoute: AuthIndexRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/chat': typeof AuthChatRoute
  '/map': typeof AuthMapRoute
  '/profile': typeof AuthProfileRoute
  '/services': typeof AuthServicesRoute
  '/shop': typeof AuthShopRoute
  '/video': typeof AuthVideoRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/chat': typeof AuthChatRoute
  '/map': typeof AuthMapRoute
  '/profile': typeof AuthProfileRoute
  '/services': typeof AuthServicesRoute
  '/shop': typeof AuthShopRoute
  '/video': typeof AuthVideoRoute
  '/': typeof AuthIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_auth': typeof AuthRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_auth/chat': typeof AuthChatRoute
  '/_auth/map': typeof AuthMapRoute
  '/_auth/profile': typeof AuthProfileRoute
  '/_auth/services': typeof AuthServicesRoute
  '/_auth/shop': typeof AuthShopRoute
  '/_auth/video': typeof AuthVideoRoute
  '/_auth/': typeof AuthIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/register'
    | '/chat'
    | '/map'
    | '/profile'
    | '/services'
    | '/shop'
    | '/video'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/register'
    | '/chat'
    | '/map'
    | '/profile'
    | '/services'
    | '/shop'
    | '/video'
    | '/'
  id:
    | '__root__'
    | '/_auth'
    | '/login'
    | '/register'
    | '/_auth/chat'
    | '/_auth/map'
    | '/_auth/profile'
    | '/_auth/services'
    | '/_auth/shop'
    | '/_auth/video'
    | '/_auth/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthRoute: typeof AuthRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthRoute: AuthRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_auth",
        "/login",
        "/register"
      ]
    },
    "/_auth": {
      "filePath": "_auth.tsx",
      "children": [
        "/_auth/chat",
        "/_auth/map",
        "/_auth/profile",
        "/_auth/services",
        "/_auth/shop",
        "/_auth/video",
        "/_auth/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_auth/chat": {
      "filePath": "_auth/chat.tsx",
      "parent": "/_auth"
    },
    "/_auth/map": {
      "filePath": "_auth/map.tsx",
      "parent": "/_auth"
    },
    "/_auth/profile": {
      "filePath": "_auth/profile.tsx",
      "parent": "/_auth"
    },
    "/_auth/services": {
      "filePath": "_auth/services.tsx",
      "parent": "/_auth"
    },
    "/_auth/shop": {
      "filePath": "_auth/shop.tsx",
      "parent": "/_auth"
    },
    "/_auth/video": {
      "filePath": "_auth/video.tsx",
      "parent": "/_auth"
    },
    "/_auth/": {
      "filePath": "_auth/index.tsx",
      "parent": "/_auth"
    }
  }
}
ROUTE_MANIFEST_END */
